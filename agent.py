from constants import llm_model
from llama_index.core.tools import QueryEngineTool, FunctionTool
from llama_index.core.agent import ReActAgent 
from tools import fetch_arxiv_papers, download_pdf

class Agent:
    def __init__(self, index, llm_model):
        self.index = index
        self.llm_model = llm_model
        self.build_query_engine()
        self.build_rag_tool()
        self.build_pdf_download_tool()
        self.build_fetch_arxiv_tool()
        self.build_agent()

    def build_query_engine(self):
        """
        Build a query engine using the provided index and LLM model.
        
        Returns:
            QueryEngine: An instance of QueryEngine configured with the index and LLM model.
        """
        self.query_engine = self.index.as_query_engine(llm=self.llm_model, 
                                                             similarity_top_k=5)
        
    def build_rag_tool(self):
        """
        Build a RAG (Retrieval-Augmented Generation) tool using the query engine.
        
        """
        self.rag_tool = QueryEngineTool.from_defaults(
            query_engine=self.query_engine,
            name="research_paper_query_engine_tool",
            description="A RAG engine with recent research papers",
        )

    def build_pdf_download_tool(self):
        """
        Build a tool for downloading PDFs of research papers.
        """
        self.download_pdf_tool = FunctionTool.from_defaults(
                    download_pdf,
                    name="download_pdf_file_tool",
                    description="python function that downloads a pdf file from a url link"
                )
        
    def build_fetch_arxiv_tool(self):
        """
        Build a tool for fetching arXiv papers based on a title.
        """
        self.fetch_arxiv_tool = FunctionTool.from_defaults(
                    fetch_arxiv_papers,
                    name="fetch_arxiv_papers_tool",
                    description="downloads the {max_results} recent papers regarding the topic {title} from arXiv"
                    )
    
    def build_agent(self):
        self.agent = ReActAgent.from_tools(
            tools=[
                self.rag_tool,
                self.download_pdf_tool,
                self.fetch_arxiv_tool
            ],
            llm=self.llm_model,
            verbose=True,
            name="ResearchPaperAgent",
            description="An agent that can fetch recent research papers, download their PDFs, and answer questions about them."
        )

    def chat(self, message: str):
        """
        Process a chat message using the agent.
        
        Args:
            message (str): The input message to process.
        
        Returns:
            str: The response generated by the agent.
        """
        response = self.agent.chat(message)
        return response